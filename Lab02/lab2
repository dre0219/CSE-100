#include<stdio.h>
#include<stdlib.h>
#include <cstdlib>
#include <iostream>
#include <vector>
using namespace std;
//Faster sort
/*
 Tree Explanation:
 1. get the center of array
 2. sort the left side in seperate array (smallest side)
 3. sort the right side in seperate array (greater side)
 4. merge left and right side back into original array
    EX: L[] = [0,2,5,6], R[] = [1,3,5,6]
    iterate through left and right using x
    *v = [0] //insert from left side (smallest)
    *v = [0,1] //insert from right side (because right side is greater than left
    *v = [0,1,2] //from left
    *v = [0,1,2,3] //from right
    *v = [0,1,2,3,5] //from left (both have 5 but our code starts on left side)
    *v = [0,1,2,3,5,5]
    *v = [0,1,2,3,5,6]
    *v = [0,1,2,3,5,6,6] //final output
    
    Question: Is the o1  output missing a  6? 
 */


//Functions
void mergeSort(int *v, int p, int q, int r);
void merge(int *v, int p, int r);
//variables for the functions
void merge(int *v, int p, int q, int r){

    int x, y; //x = iterator for right side, y = iterator for left side
    int i = 0; //iterator for v
    int n1 = q - p + 1; //n1 = center index + 1
    int n2 = r - q; //last index - first index
    int L[n1+1], R[n2+1]; //arrays to hold left side (L) and right side (R)

    //add to left side array
    for (y = 0; y < n1; y++)
    L[y] = v[p + y]; //add to left side from pointer array v at [begin index + y ](until center)

    //add to right side array
    for (x = 0; x < n2; x++){
    R[x] = v[q +1 + x]; //add to right side array until end from pointer array v at [center of the array + 1 + x] (until the end)
    }
    
    y = x = 0; //reset y and x
    i = p; //i = begin index

//start merging left and right back into v pointer array
    while (y < n1 && x < n2){ //while y is < center index and x < end index and also in order to have the formula make sense on the right being bigger 
        if ((L[y] <= R[x])){ //if loop so that left at y is less than right at x to get ascending order
            v[i] = L[y]; //having the left array be part of the v array
            y++; //iterating y
        }else{
            v[i] = R[x]; //having the right array be part of the v array
            x++; //iterating x
        }
        i++; //iterating i
    }
    //furthermore just explaining how the numbers are put back from left and right arrays

    while (y < n1){ //fill up v with the rest of of the left until center (n1=center index + 1)
        v[i] = L[y]; //having the left array be part of the v array
        y++; //iterating left
        i++; //v
    }

    while (x < n2){ //fill up v with the rest of the array until end of array with the right (n2=last - first index)
        v[i] = R[x]; //having the right array be part of the v array
        x++; //iterating right
        i++; //v
    }
}




//Middle
void mergeSort(int *v, int p, int r) {
//v = pointer to array
//p = start index
//r = end index
int q; //variable for center of array 
if (p < r) { //if loop for if the start of the index is less than the end index
q = (p + r) / 2; //center of array variable thats from start index and end index
mergeSort(v, p, q); //sort left side
mergeSort(v, q + 1, r); //sort right side
merge(v, p, q, r); //merge all together
}
}




void printArray(int *arr, int n) { //inputs: pointer array, size of pointer array
    for (int y = 0; y < n; y++){ //for loop that iterates through pointer array of size n
        cout<< arr[y]<<";"; //iterate through pointer array and print out value
    }
}






//Main driving code
int main(){
    int n; //hold size of pointer array
    cin>>n; //user input = n
    int *a = new int[n]; //new array pointer of size n from pointer a 

    for(int y=0; y<n; ++y){ //for loop for inputs that user puts into the array. 
        cin>>a[y]; //get all values of pointer array (a)
    }

    mergeSort(a,0,n-1); //run merge function input: pointer array, from 0 to length of pointer array(n)
    printArray(a, n); //print sorted array
}